AWSTemplateFormatVersion: 2010-09-09
Description: "Guidance for Natural Language Queries of various datasources on AWS - main stack template"
Parameters:
    
  VpcCIDR:
    Description: The IP range (CIDR notation) for this VPC
    Type: String
    Default: 172.30.0.0/16

  PublicSubnet1CIDR:
    Description: The IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 172.30.1.0/24

  PublicSubnet2CIDR:
    Description: The IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 172.30.2.0/24

  MyIpAddress:
    Type: String
    Default: 15.248.5.122/32
    Description: Your IP address in the form 15.248.5.122/32

  NLQAppDatabaseName:
    Type: String
    Default: "postgres"
    Description: NLQ application database.

  RDSPort:
    Type: Number
    Default: 5432
    Description: The port RDS is listening on.

  RDSEngineVersion:
    Type: String
    Default: "16.1"
    Description: The RDS PostgreSQL engine version.

  ProjectTagValue:
    Type: String
    Default: "NLQ"
    Description: The Project Tag value applied to all resources.
    
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
        - Key: "Project"
          Value: !Ref ProjectTagValue

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Ref PublicSubnet1CIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Project"
          Value: !Ref ProjectTagValue

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Ref PublicSubnet2CIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Project"
          Value: !Ref ProjectTagValue

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Project"
          Value: !Ref ProjectTagValue

  DefaultPublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Project"
          Value: !Ref ProjectTagValue

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  RDSDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Amazon RDS Subnet Group"
      DBSubnetGroupName: !Sub "default-${PublicSubnet1.VpcId}"
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  RDSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for RDS instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: Access to RDS from MyIP
          CidrIp: !Ref MyIpAddress
          FromPort: !Ref RDSPort
          IpProtocol: "tcp"
          ToPort: !Ref RDSPort
      SecurityGroupEgress:
        - Description: Egress access to internet
          CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
      Tags:
        - Key: "Project"
          Value: !Ref ProjectTagValue

  RDSCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      DBClusterIdentifier: aurora-pg-cluster
      ManageMasterUserPassword: true
      MasterUsername: "postgres"
      Engine: "aurora-postgresql"
      EngineVersion: !Ref RDSEngineVersion
      EnableHttpEndpoint: true
      Port: !Ref RDSPort
      DBSubnetGroupName: !Sub "default-${PublicSubnet1.VpcId}"
      VpcSecurityGroupIds:
        - !GetAtt RDSSecurityGroup.GroupId
      Tags:
        - Key: "Project"
          Value: !Ref ProjectTagValue
      
  RDSDBInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceIdentifier: aurora-pg-instance
      #DBName: !Ref NLQAppDatabaseName
      Engine: "aurora-postgresql"
      DBClusterIdentifier: !Ref RDSCluster
      PubliclyAccessible: true
      DBInstanceClass: "db.r6g.large"
      Tags:
        - Key: "Project"
          Value: !Ref ProjectTagValue      
  
  RDSDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: AutoGenerated Secrets Manager secret for the Database Instance
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: password
        PasswordLength: 32
        IncludeSpace: false
      
  VPCEndpointS3GTW:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Gateway"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      PolicyDocument: '{"Version":"2008-10-17","Statement":[{"Effect":"Allow","Principal":"*","Action":"*","Resource":"*"}]}'
      RouteTableIds:
        - !Ref PublicRouteTable
      PrivateDnsEnabled: false

  VPCEndpointSecretsManager:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      PolicyDocument: |
        {
          "Statement": [
            {
              "Action": "*", 
              "Effect": "Allow", 
              "Principal": "*", 
              "Resource": "*"
            }
          ]
        }
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt RDSSecurityGroup.GroupId
            
  LambdaLogGroup: 
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/aws/lambda/nlq-fun-for-agent-p"
      RetentionInDays: 1
  
  LambdaFunction:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Function"
    DeletionPolicy: "Delete"
    Properties:
      MemorySize: 1024
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 60
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "index.lambda_handler"      
      Code:
        ZipFile: !Sub |
            import boto3
            from time import sleep

            def lambda_handler(event, context):
                # print("the received EVENT:",  event)
                        
                def get_rds_query_results(event):
                    rds_data_client = boto3.client('rds-data')
                    
                    # Extracting the SQL query
                    query = event['requestBody']['content']['application/json']['properties'][0]['value']
                    
                    print("query:", query)

                    res = rds_data_client.execute_statement(
                                resourceArn = 'arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:${RDSCluster}',
                                secretArn = '${RDSCluster.MasterUserSecret.SecretArn}',
                                database = '${NLQAppDatabaseName}',
                                sql = query,
                                includeResultMetadata = True) 
                    print("response:", res)
                    return res

                action_group = event.get('actionGroup')
                api_path = event.get('apiPath')

                print("api_path:", api_path)

                result = ''
                response_code = 200


                if api_path == '/query/rds':
                    result = get_rds_query_results(event)
                else:
                    response_code = 404
                    result = {"error": f"Unrecognized api path: {action_group}::{api_path}"}

                response_body = {
                    'application/json': {
                        'body': result
                    }
                }

                action_response = {
                    'actionGroup': action_group,
                    'apiPath': api_path,
                    'httpMethod': event.get('httpMethod'),
                    'httpStatusCode': response_code,
                    'responseBody': response_body
                }

                api_response = {'messageVersion': '1.0', 'response': action_response}
                return api_response
      Role: !GetAtt IAMRoleForAgentLambda.Arn
      FileSystemConfigs: []
      FunctionName: "nlq-fun-for-agent"
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LambdaLogGroup
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  
  IAMRoleForAgentLambda:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::Role"
    DeletionPolicy: "Delete"
    Properties:
      Path: "/service-role/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      - "arn:aws:iam::aws:policy/AmazonRDSDataFullAccess"
      MaxSessionDuration: 3600
      RoleName: "nlq-role-for-agentic-fun"
      Policies:
      - PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Resource: !GetAtt RDSCluster.MasterUserSecret.SecretArn
            Action:
            - "secretsmanager:GetSecretValue"
            Effect: "Allow"
          - Resource: !GetAtt LambdaLogGroup.Arn
            Action:
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Effect: "Allow"
        PolicyName: "nlq-policy-lambda"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"

  S3Bucket:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::S3::Bucket"
    DeletionPolicy: "Delete"
    Properties:
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      BucketName: !Sub "nlq-s3-data-${AWS::Region}"
      OwnershipControls:
        Rules:
        - ObjectOwnership: "BucketOwnerEnforced"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
          ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"

  SSMRDSClusterArn:
    Type: AWS::SSM::Parameter
    Properties:
      Description: DO NOT UPDATE. Updated from CFN. RDSCluster.Arn
      Name: "/nlq/rdscluster/arn"
      Type: String
      Value: !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:${RDSCluster}"

  SSMRDSSecretArn:
    Type: AWS::SSM::Parameter
    Properties:
      Description: DO NOT UPDATE. Updated from CFN. RDSCluster.MasterUserSecret.SecretArn
      Name: "/nlq/rdscluster/secret/arn"
      Type: String
      Value: !GetAtt RDSCluster.MasterUserSecret.SecretArn

  SSMRDSDBName:
    Type: AWS::SSM::Parameter
    Properties:
      Description: DO NOT UPDATE. Updated from CFN. RDSDBInstance.DBName
      Name: "/nlq/rdsinstance/dbname"
      Type: String
      Value: !Ref NLQAppDatabaseName

  SSMS3Arn:
    Type: AWS::SSM::Parameter
    Properties:
      Description: DO NOT UPDATE. Updated from CFN. S3Bucket.Arn.
      Name: "/nlq/s3/arn"
      Type: String
      Value: !GetAtt S3Bucket.Arn

  SSMLambdaName:
    Type: AWS::SSM::Parameter
    Properties:
      Description: DO NOT UPDATE. Updated from CFN. Lambda function name.
      Name: "/nlq/lambda"
      Type: String
      Value: !Ref LambdaFunction

  SSMLambdaArn:
    Type: AWS::SSM::Parameter
    Properties:
      Description: DO NOT UPDATE. Updated from CFN. Lambda function Arn.
      Name: "/nlq/lambda/arn"
      Type: String
      Value: !GetAtt LambdaFunction.Arn
      
Outputs:
  RDSDBInstanceEndpointAddress:
    Description: The RDS endpoint address.
    Value: !GetAtt RDSDBInstance.Endpoint.Address
    
  S3BucketLocation:
    Description: The S3Bucket location.
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/s3/upload/${S3Bucket}"
