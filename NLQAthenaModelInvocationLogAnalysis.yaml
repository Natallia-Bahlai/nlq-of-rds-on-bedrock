AWSTemplateFormatVersion: 2010-09-09
Description: "Natural Language Queries - Analysis of Amazon Bedrock Model Invocation Logs with Amazon Athena"
        
Resources:
  S3Bucket:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::S3::Bucket"
    DeletionPolicy: "Delete"
    Properties:
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      BucketName: !Sub "nlq-logs-${AWS::Region}"
      OwnershipControls:
        Rules:
        - ObjectOwnership: "BucketOwnerEnforced"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
          ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"
            
  DataCatalog:
    UpdateReplacePolicy: "Retain"
    Type: AWS::Glue::Database
    DeletionPolicy: "Delete"
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: "Database for Model Invocation Logs"
        Name: !Sub "nlq-logs"
            
  IAMRole:
    Type: "AWS::IAM::Role"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      Path: "/service-role/"
      MaxSessionDuration: 3600
      RoleName: !Sub "nlq-crawler-role-${AWS::Region}"
      Policies:
      - PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Resource: "*"
            Action:
            - "glue:*"
            - "s3:GetBucketLocation"
            - "s3:ListBucket"
            - "s3:ListAllMyBuckets"
            - "s3:GetBucketAcl"
            - "ec2:DescribeVpcEndpoints"
            - "ec2:DescribeRouteTables"
            - "ec2:CreateNetworkInterface"
            - "ec2:DeleteNetworkInterface"
            - "ec2:DescribeNetworkInterfaces"
            - "ec2:DescribeSecurityGroups"
            - "ec2:DescribeSubnets"
            - "ec2:DescribeVpcAttribute"
            - "iam:ListRolePolicies"
            - "iam:GetRole"
            - "iam:GetRolePolicy"
            - "cloudwatch:PutMetricData"
            Effect: "Allow"
          - Resource: !Sub "arn:aws:s3:::${S3Bucket}/AWSLogs/${AWS::AccountId}/BedrockModelInvocationLogs*"
            Action:
            - "s3:GetObject"
            - "s3:PutObject"
            Effect: "Allow"
          - Resource: "arn:aws:logs:*:*:*:/aws-glue/*"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Effect: "Allow"
        PolicyName: "nlq-policy-agent"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "glue.amazonaws.com"
        
  Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "nlq-cwatch-crawler"
      Role: !GetAtt IAMRole.Arn
      DatabaseName: !Ref DataCatalog
      Targets:
        S3Targets:
          - Path: !Sub "${S3Bucket}/AWSLogs/${AWS::AccountId}/BedrockModelInvocationLogs/"
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Schedule:
        ScheduleExpression: "cron(10 9-17 ? * MON-FRI *)"
        
  AthenaNamedQuery1st:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DataCatalog
      Description: "A query to analyze Model Invocation Logs"
      Name: "nlq-sql-1st-query-summary"
      QueryString: >
                    WITH resultsRanked as (
                        SELECT partition_1,
                            partition_2,
                            partition_3,
                            partition_4,
                            modelId, 
                            region,
                            input.inputBodyJson.messages [ 1 ].content [ 1 ].text nlQuery,
                            input.inputTokenCount tokenCntIn,
                            output.outputTokenCount tokenCntOut,
                            cardinality(input.inputBodyJson.messages) stepsCnt,
                            ROW_NUMBER() OVER (
                                PARTITION BY input.inputBodyJson.messages [ 1 ].content [ 1 ].text,
                                partition_1,
                                partition_2,
                                partition_3,
                                partition_4
                                ORDER BY cardinality(input.inputBodyJson.messages) DESC
                            ) AS rankNum,
                            input.inputBodyJson.messages inMsgs,
                            output.outputBodyJson.content outMsgs,
                            timestamp
                        FROM "AwsDataCatalog"."nlq-logs"."bedrockmodelinvocationlogs"
                    ), pricing as (
                        SELECT *
                        FROM (
                            VALUES 
                            ROW('anthropic.claude-3-5-sonnet-20240620-v1:0', 0.000003, 0.000015, 'us-west-2'),
                            ROW('anthropic.claude-3-sonnet-20240229-v1:0', 0.000003, 0.000015, 'us-west-2'),
                            ROW('anthropic.claude-3-haiku-20240307-v1:0', 0.00000025, 0.00000125, 'us-west-2'),
                            ROW('anthropic.claude-3-sonnet-20240229-v1:0', 0.000003, 0.000015, 'ap-southeast-2'),
                            ROW('anthropic.claude-3-haiku-20240307-v1:0', 0.00000025, 0.00000125, 'ap-southeast-2')
                        ) AS users (modelId, priceIn, priceOut, region)
                    ), resultsSummary as (
                        SELECT partition_1,
                            partition_2,
                            partition_3,
                            partition_4,
                            r.modelId,
                            nlQuery,
                            SUM(tokenCntIn) tokenCntIn,
                            SUM(tokenCntOut) tokenCntOut,
                            CAST(SUM(tokenCntIn * priceIn) + SUM(tokenCntOut * priceOut) as decimal(10,4)) cost,
                            MAX(timestamp) as timestamp,
                            MAX(stepsCnt) stepsCnt
                        FROM resultsRanked r
                            LEFT JOIN pricing p on r.modelId = p.modelId and r.region = p.region
                        GROUP BY r.modelId,
                            nlQuery,
                            partition_1,
                            partition_2,
                            partition_3,
                            partition_4
                    ) 
                    SELECT partition_1 || partition_2 || partition_3 || '-' || partition_4 as "yyyymmdd-hh",
                        nlQuery, modelId, tokenCntIn, tokenCntOut, cost, stepsCnt
                    FROM resultsSummary
                    ORDER BY timestamp desc
                    LIMIT 10
                    --WHERE nlQuery in ('show me top 5 departments with average number of employees') 
                    -- to review stats such as input and output tokens, estimated cost for a given NL query



  AthenaNamedQuery2nd:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DataCatalog
      Description: "A query to analyze Model Invocation Logs"
      Name: "nlq-sql-2nd-query-detailed"
      QueryString: >
                    WITH resultsRanked as (
                        SELECT partition_1,
                            partition_2,
                            partition_3,
                            partition_4,
                            modelId, 
                            region,
                            input.inputBodyJson.messages [ 1 ].content [ 1 ].text nlQuery,
                            input.inputTokenCount tokenCntIn,
                            output.outputTokenCount tokenCntOut,
                            cardinality(input.inputBodyJson.messages) msgCntIn,
                            ROW_NUMBER() OVER (
                                PARTITION BY input.inputBodyJson.messages [ 1 ].content [ 1 ].text,
                                partition_1,
                                partition_2,
                                partition_3,
                                partition_4
                                ORDER BY cardinality(input.inputBodyJson.messages) DESC
                            ) AS rankNum,
                            input.inputBodyJson.messages inMsgs,
                            output.outputBodyJson.content outMsgs,
                            timestamp
                        FROM "AwsDataCatalog"."nlq-logs"."bedrockmodelinvocationlogs"
                    ), pricing as (
                        SELECT *
                        FROM (
                            VALUES 
                            ROW('anthropic.claude-3-5-sonnet-20240620-v1:0', 0.000003, 0.000015, 'us-west-2'),
                            ROW('anthropic.claude-3-sonnet-20240229-v1:0', 0.000003, 0.000015, 'us-west-2'),
                            ROW('anthropic.claude-3-haiku-20240307-v1:0', 0.00000025, 0.00000125, 'us-west-2'),
                            ROW('anthropic.claude-3-sonnet-20240229-v1:0', 0.000003, 0.000015, 'ap-southeast-2'),
                            ROW('anthropic.claude-3-haiku-20240307-v1:0', 0.00000025, 0.00000125, 'ap-southeast-2')
                        ) AS users (modelId, priceIn, priceOut, region)
                    ), resultsSummary as (
                        SELECT partition_1,
                            partition_2,
                            partition_3,
                            partition_4,
                            r.modelId,
                            nlQuery,
                            SUM(tokenCntIn) tokenCntIn,
                            SUM(tokenCntOut) tokenCntOut,
                            CAST(SUM(tokenCntIn * priceIn) + SUM(tokenCntOut * priceOut) as decimal(10,4)) cost,
                            MAX(timestamp) as timestamp
                        FROM resultsRanked r
                            LEFT JOIN pricing p on r.modelId = p.modelId and r.region = p.region
                        GROUP BY r.modelId,
                            nlQuery,
                            partition_1,
                            partition_2,
                            partition_3,
                            partition_4
                    ), resultsDetailed as (
                        SELECT partition_1,
                            partition_2,
                            partition_3,
                            partition_4,
                            modelId,
                            nlQuery,
                            msg.role,
                            --msg.content,
                            REDUCE(
                                msg.content,
                                '',
                                (acc, x)->CASE
                                    WHEN x.type = 'text' THEN x.text
                                    --WHEN x.type = 'tool_use' and starts_with(x.name, 'post__') THEN concat(acc, chr(10) || '>_' || chr(10), x.input.query) 
                                    --WHEN x.type = 'tool_use' and starts_with(x.name, 'GET__x_amz_knowledgebase') THEN concat(acc, chr(10) || chr(10), 'Schema search: ' || x.input.searchQuery)
                                    --WHEN x.type = 'tool_result' THEN x.content 
                                    --ELSE concat(acc, chr(10) || chr(10), x.text) 
                                END,
                                acc->acc
                            ) as msgChain, step
                        FROM resultsRanked
                            CROSS JOIN UNNEST(inMsgs) WITH ORDINALITY as t(msg, step)
                        WHERE rankNum = 1
                    ) 
                    SELECT partition_1 || partition_2 || partition_3 || '-' || partition_4 as "yyyymmdd-hh",
                        nlQuery, step, role, msgChain
                    FROM resultsDetailed 
                    LIMIT 10
                    --WHERE nlQuery LIKE 'show me top 5 departments with average number of employees%' 
                    -- to review agentic chain of thought for a given NL query